<?php

/**
 * Misc functions for Ziquid games.
 *
 * @file
 *
 * Synced with CG: yes
 * Synced with 2114: no
 * Ready for phpcbf: no
 */

require_once drupal_get_path('module', 'stlouis') . '/includes/functions-staff.inc';
//require_once drupal_get_path('module', 'stlouis') . '/includes/functions-no.inc';
require_once drupal_get_path('module', 'stlouis') . '/includes/functions-equip.inc';
require_once drupal_get_path('module', 'stlouis') . '/includes/functions-land.inc';

function game_button($link = 'home', $type = 'continue', $extra_link = '') {

  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  $link = $game . '/' . $link . '/' . $arg2 . $extra_link;

  echo <<< EOF
<div class="button-wrapper">
  <a class="button-$type button" href="/$link">
    $type
  </a>
</div>
EOF;
}

/**
 * Tell the client to speak some text.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param string $text
 *   The text to speak.
 * @param bool $force
 *   Force the code to instruct the client to speak even if user has not opted
 *   in.
 */
function game_speech($game_user, $text, $force = FALSE) {
//  global $game;
//  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  if ($force || zg_get_value($game_user, 'GiveMeMyTongue', FALSE)) {
    drupal_add_js([
      'stlouis' => [
        'speech' => $text,
      ],
    ], 'setting');
  }
}

/**
 * Fetch the list of quest groups to show.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param null|int $id
 *   Which group to fetch, or all if null.
 *
 * @return \stdClass|\stdClass[]
 *   A quest group object or the entire array of quest group objects.
 */
function game_fetch_quest_groups(\stdClass $game_user, $id = NULL) {
  $data = [];

  // Admin?  Show all quests.
  $active_quests = ($game_user->meta == 'admin') ? '' :
    'and quests.active = 1 and required_level <= %d';

  // SQL for quests.
  $sql_quests = 'select quests.*,
  quest_completion.percent_complete as completed_percent,
  neighborhoods.name as hood, comp1.name as competency_name_1
  from quests
  LEFT OUTER JOIN neighborhoods
  ON quests.fkey_neighborhoods_id = neighborhoods.id
  LEFT OUTER JOIN quest_completion
  ON quest_completion.fkey_quests_id = quests.id
  AND quest_completion.fkey_users_id = %d
  LEFT JOIN competencies as comp1
  ON fkey_enhanced_competencies_id = comp1.id
  where `group` = %d
  ' . $active_quests . '
  order by required_level ASC;';

  // Fetch a single group or all quest groups.
  if (is_numeric($id)) {
    $sql = 'SELECT qg.* FROM `quest_groups` qg
      where qg.id = %d;';
  }
  else {
    $sql = 'SELECT qg.* FROM `quest_groups` qg
    order by qg.id ASC';
  }
  $result = db_query($sql, $id);
  while ($item = db_fetch_object($result)) {
    $data[$item->id] = $item;
  }

  foreach ($data as &$item) {
    list($item->quest_completion,
      $item->percentage_target,
      $item->percentage_divisor,
      $item->next_group_html) =
    game_fetch_quest_group_stats($game_user, $active_quests, $item->id);

    // Show?  if a specific group was requested, always show it.
    $show = is_numeric($id) ? TRUE : FALSE;

    // Always show Introductory missions.
    if ($item->id == 0) {
      $show = TRUE;
    }

    // If they have finished the previous <1000 group, show this one.
    if ($item->id < 1000 && $item->id > 0) {
      $last = $data[$item->id - 1];
//      firep($last, 'last quest group');
      if (is_numeric($last->quest_completion->completed) &&
        ($last->quest_completion->completed > 0 &&
        $last->quest_completion->completed == $last->quest_completion->total) ||
        ($last->percentage_divisor > 1)) {
        $show = TRUE;
      }
    }

    // Highlighted in this hood?  Show it.
    if ($item->highlight_in_hood == $game_user->fkey_neighborhoods_id) {
      $show = TRUE;
    }

    // Allow altering of show flag.
    $show |= game_alter('flag_show_quest_group_' . $item->id, $game_user, $item);

    if (!$show) {
      if ($game_user->meta == 'admin') {
        $item->class = 'obfuscate admin-obfuscate clickable';
      }
      else {
        $item->class = 'obfuscate';

        // Normal group?  Obfuscate.  Otherwise, hide.
        if ($item->id < 1000) {
          $item->name = '???';
          $item->description = t('Complete a previous mission group to see this one.');
          $item->quest_completion->completed = '???';
          $item->quest_completion->total = '???';
        }
        else {
          $item->class = 'hidden';
        }
      }
    }
    else {
      $item->class = 'clickable';
    }

    // Clickable?  Grab quest objects to show.
    if (strpos($item->class, 'clickable') !== FALSE) {
      $item->q = [];
      $result = db_query($sql_quests, $game_user->id, $item->id, $game_user->level + 1);
      while ($q = db_fetch_object($result)) {
        list($q->rgb, $q->width, $q->completed_percent_overlay) =
          game_get_quest_completion($q->completed_percent,
          $item->percentage_target, $item->percentage_divisor);
        game_get_icon_path($game_user, $q, 'quests');
        $item->q[$q->id] = $q;
      }
      if (!count($item->q)) {
        $item->class = 'hidden';
      }
    }

//firep($item, 'items');
    // Allow altering of individual qgos.
    game_alter('fetch_quest_group_' . $item->id, $game_user, $item);

  }

  // Allow altering of full qgo object.
  game_alter('fetch_quest_groups', $game_user, $data);
//  firep($data, 'data');
  return is_numeric($id) ? $data[$id] : $data;
}

/**
 * Fetch the list of quest groups to show.
 *
 * @param \stdClass $game_user
 *   The game user object.
 *
 * @return \stdClass[]
 *   The array of quest group objects.
 */
function game_fetch_visible_quest_groups(\stdClass $game_user) {
  $data = $data2 = [];
  $sql = 'SELECT qg.*, q.required_level FROM `quest_groups` qg
    left join quests q on q.group = qg.id
    where q.required_level <= %d
    group by qg.id';
  $result = db_query($sql, $game_user->level);
  while ($item = db_fetch_object($result)) {
    $data[] = $item;
  }

  foreach ($data as $item) {
    // Allow altering of qgos.
    game_alter('fetch_quest_group', $game_user, $item);

    if ($item->highlight_in_hood == $game_user->fkey_neighborhoods_id) {
      $data2[] = $item;
    }
  }

  return $data2;
}

/**
 * Show a quest group name, with a link to go to it.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param \stdClass $item
 *   The quest group object.
 * @param string $ai_output
 *   Unused.
 */
function game_show_quest_group(\stdClass $game_user, $item, &$ai_output) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  $link = 'quest_groups';

  echo <<< EOF
  <span class="title">
    <div class="quest-group-name">
      <a href="/$game/$link/$arg2/$item->id#group-{$item->id}">
        $item->name
      </a>
    </div>
  </span>
EOF;
}

/**
 * Show a quest group object as a slide.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param \stdClass $qgo
 *   The quest group object.
 * @param array $options
 *   Various options to control the display.
 */
function game_show_quest_group_slide(\stdClass $game_user, \stdClass $qgo, $options = []) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  if (strpos($qgo->class, 'hidden') !== FALSE) {
    return;
  }

  if (strpos($qgo->class, 'clickable') !== FALSE) {
    $onclick =<<< EOF
onclick="jQuery(this).removeClass('overview');"
EOF;
  }
  else {
    $onclick = '';
  }

  if ($qgo->showExpanded) {
    $overview = '';
  }
  else {
    $overview = 'overview';
  }

  $description_class = strlen($qgo->description) ? '' : 'empty';
  if ($qgo->descriptionShowExpanded) {
    $description_class .= ' show-expanded';
  }
  if (!strlen($qgo->titleHtml)) {
    $qgo->titleHtml = <<< EOF
<div class="quest-group-name fit-box $qgo->class">$qgo->name {$game_text['quest']}s</div>
EOF;
  }
//firep($qgo, 'quest group object');
  echo <<< EOF
<div class="swiper-slide {$overview} quest-group-{$qgo->id}" data-hash="group-{$qgo->id}" $onclick>
  <span class="title">
EOF;

  $titleShown = FALSE;

  // Show any quest images.
  if (isset($qgo->q)) {
    echo '<div class="quest-images">';
    foreach ($qgo->q as $q) {

      // Mark quests that can't be performed in this hood.
      $q->wrong_hood = $q->not_yet = '';
      if ($q->fkey_neighborhoods_id &&
        ($q->fkey_neighborhoods_id != $game_user->fkey_neighborhoods_id)) {
        $q->wrong_hood = 'wrong-hood';
        list(, , $q->actions_to_move,) = game_get_actions_to_move($game_user,
          $game_user->fkey_neighborhoods_id, $q->fkey_neighborhoods_id);

        // Color code the wrong-hood icon.
        if ($q->actions_to_move > $game_user->actions) {
          $q->wrong_hood_color = 'red';
        }
        elseif ($q->actions_to_move > ($game_user->actions / 2)) {
          $q->wrong_hood_color = 'orange';
        }
        elseif ($q->actions_to_move > ($game_user->actions / 4)) {
          $q->wrong_hood_color = 'yellow';
        }
        else {
          $q->wrong_hood_color = 'green';
        }

        // 6 Actions or less and the user has 6 available?  Make it green.
        if ($q->actions_to_move <= 6 && $game_user->actions >= 6) {
          $q->wrong_hood_color = 'green';
        }
      }

      if ($q->required_level > $game_user->level) {
        $q->not_yet = 'not-yet';
        // Not yet trumps wrong hood.
        $q->wrong_hood = '';
      }

      if (!$titleShown && !$q->optionShowBeforeTitle) {
        echo <<< EOF
      {$qgo->titleHtml}
      <div class="quest-group-completion {$qgo->questGroupCompletionClasses}">
      <strong>{$qgo->quest_completion->completed}</strong> of {$qgo->quest_completion->total}
      {$game_text['quest']}s complete $qgo->next_group_html</div>
    <div class="description $description_class">
      $qgo->description
    </div>
EOF;
        $titleShown = TRUE;
      }

      if (strlen($q->wrong_hood) || strlen($q->not_yet)) {
        echo <<< EOF
          <div class="{$q->not_yet}{$q->wrong_hood}-wrapper overview-only">
EOF;
      }
      echo <<< EOF
<img class="overview-only {$q->wrong_hood}{$q->not_yet}"
  src="{$q->icon_path}"
  style="box-shadow: #{$q->rgb} 2px 2px 4px; border-color: #{$q->rgb}">
EOF;
      if (strlen($q->wrong_hood)) {
        echo <<< EOF
          <img class="wrong-hood-overlay colorize-{$q->wrong_hood_color}"
            src="http://www.clker.com/cliparts/a/Y/q/g/B/G/simple-black-car-th.png"
            alt="{$q->actions_to_move} actions to move">
        </div>
EOF;
      }
      if (strlen($q->not_yet)) {
        echo <<< EOF
          <span class="not-yet-overlay">Soon</span>
        </div>
EOF;
      }
      game_show_quest_slide($game_user, $q);
    }
    echo '</div>';
  }

  if (!$titleShown) {
    echo <<< EOF
      {$qgo->titleHtml}
      <div class="quest-group-completion {$qgo->questGroupCompletionClasses}">
      <strong>{$qgo->quest_completion->completed}</strong> of {$qgo->quest_completion->total}
      {$game_text['quest']}s complete $qgo->next_group_html</div>
    <div class="description $description_class">
      $qgo->description
    </div>
EOF;
    $titleShown = TRUE;
  }

  echo '</span></div>';
}

/**
 * Get quest group stats.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param int $group_to_show
 *   Which group to show.
 *
 * @return array
 *   Quest group stats array.
 */
function game_fetch_quest_group_stats(\stdClass $game_user, $active_quests, $group_to_show) {

  // Get quest group stats.
  $sql = 'SELECT sum(bonus_given) as completed, count(quests.id) as total
    FROM `quests`
    left outer join quest_completion
    on quest_completion.fkey_quests_id = quests.id
    and fkey_users_id = %d
    where `group` = %d ' . $active_quests . ';';
  $result = db_query($sql, $game_user->id, $group_to_show, $game_user->level);
  $quest_group = db_fetch_object($result);
  $quest_group->completed += 0;

  $sql = 'SELECT times_completed FROM `quest_group_completion`
  where fkey_users_id = %d and fkey_quest_groups_id = %d;';
  $result = db_query($sql, $game_user->id, $group_to_show);
  $quest_group_completion = db_fetch_object($result);

  $percentage_target = 100;
  $percentage_divisor = 1;
  $next_group_html = '';

  if ($quest_group_completion->times_completed > 0) {
    $next_group_html = t('(2nd round)');
    $percentage_target = 200;
    $percentage_divisor = 2;
    $quest_group->completed -=
      ($quest_group->total * min($quest_group_completion->times_completed, 1));
  }

  return [
    $quest_group,
    $percentage_target,
    $percentage_divisor,
    $next_group_html
  ];
}

/**
 * Get the percentage complete visual cues for a quest.
 *
 * @param int $completed_percent
 *   The percentage complete.
 * @param int $percentage_target
 *   Which percentage is considered fully complete.
 * @param int $percentage_divisor
 *   The divisor to get the percentage_target down to 100.
 *
 * @return array
 *   The RGB value corresponding to the percentage done, the width of a
 *   progress bar, and some CSS.
 */
function game_get_quest_completion($completed_percent, $percentage_target, $percentage_divisor) {
  if (empty($completed_percent)) {
    $completed_percent = 0;
  }
  if ($completed_percent > floor($percentage_target / 2)) {
    $rgb = dechex(floor(($percentage_target - $completed_percent) /
      (6 * $percentage_divisor) + 4)) . 'c0';
  }
  else {
    $rgb = 'c' . dechex(floor(($completed_percent) /
      (4 * $percentage_divisor))) . '0';
  }

  if ($completed_percent == 100) {
    $css_overlay = '';
  }
  elseif ($completed_percent == 0) {
    $css_overlay = 'clip-path: circle(1%);';
  }
  else {
    // Figure out overlay.
    $pts = [[50, 0]];
    $cp = $completed_percent;
    if ($cp >= 12.5) {
      $pts[] = [100, 0];
    }
    else {
      $pts[] = [50 + $cp * 4, 0];
    }

    if ($cp >= 37.5) {
      $pts[] = [100, 100];
    }
    elseif ($cp > 12.5) {
      $pts[] = [100, ($cp - 12.5) * 4];
    }

    if ($cp >= 62.5) {
      $pts[] = [0, 100];
    }
    elseif ($cp > 37.5) {
      $pts[] = [(62.5 - $cp) * 4, 100];
    }

    if ($cp >= 87.5) {
      $pts[] = [0, 0];
    }
    elseif ($cp > 62.5) {
      $pts[] = [0, (87.5 - $cp) * 4, 100];
    }

    if ($cp > 87.5) {
      $pts[] = [($cp - 87.5) * 4, 0];
    }

    $css_overlay = 'clip-path: polygon(50% 50%';
    foreach ($pts as $pt) {
      $x = floor($pt[0]);
      $y = floor($pt[1]);
      if ($x == 100) {
        $x = 110;
      }
      if ($y == 100) {
        $y = 110;
      }
      $css_overlay .= ', ' . $x . '% ' . $y . '%';
    }
    $css_overlay .= ');';
  }
  $width = floor($completed_percent * 94 / $percentage_target) + 2;
//  firep($css_overlay, 'css overlay');
  return [$rgb, $width, $css_overlay];
}

/**
 * Recalc the income and expenses for a user.
 *
 * @param \stdClass $game_user
 *   The game user object.
 */
function game_recalc_income(\stdClass $game_user) {
  return zg_recalc_income($game_user);
}

function game_show_aides_menu(\stdClass $game_user) {

  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  $title = '';

  if (substr(arg(1), 0, 4) == 'land') {
    $land_active = 'active';
  }
  if (arg(1) == 'land') {
    $title = t('Available @land', ['@land' => $land_plural]);
  }

  if (substr(arg(1), 0, 9) == 'equipment') {
    $equip_active = 'active';
  }
  if (arg(1) == 'equipment') {
    $title = t('Purchase @equip', ['@equip' => $equipment]);
  }

  if (substr(arg(1), 0, 5) == 'staff') {
    $staff_active = 'active';
  }
  if (arg(1) == 'staff') {
    $title = t('Hire @staff and @agents', [
      '@staff' => $game_text['staff'],
      '@agents' => $game_text['agents'],
    ]);
  }

  echo <<< EOF
<div class="news">
  <a href="/$game/land/$arg2" class="button $land_active">$land_plural</a>
  <a href="/$game/equipment/$arg2" class="button $equip_active">$equipment</a>
  <a href="#" class="button not-yet $clan_eq_active">{$game_text['clan_eq_short']}</a>
  <a href="/$game/staff/$arg2" class="button $staff_active">{$game_text['staff']}/{$game_text['agents']}</a>
  <!--<a href="/$game/agents/$arg2" class="button">Agents</a>-->
</div>
EOF;

  if ($land_active) {
    echo <<< EOF
<div class="news secondary">
  <div class="news-buttons">
    <button id="land-all" class="active">All</button>
    <button id="land-jobs">{$game_text['job_plural']}</button>
    <button id="land-investments">{$game_text['investment_plural']}</button>
  </div>
</div>
EOF;

    drupal_add_js(drupal_get_path('module', 'stlouis')
      . '/game_show_aides_menu_land.js', 'module', 'footer');
  }

  if ($equip_active && $game_user->level >= 25) {
    echo <<< EOF
<div class="news secondary">
  <div class="news-buttons">
    <button id="equip-all" class="active">All</button>
    <button id="equip-ini">{$game_text['initiative_short']}</button>
    <button id="equip-end">{$game_text['endurance_short']}</button>
    <button id="equip-elo">{$game_text['elocution_short']}</button>
    <button id="equip-move">Moving</button>
    <button id="equip-other">Other</button>
  </div>
</div>

<div class="news secondary">
  <div class="news-buttons">
    <button id="equip-buy">Buyable</button>
    <button id="equip-sal">Salable</button>
    <button id="equip-upk">Upkeep</button>
    <button id="equip-eng">{$game_text['energy']}</button>
    <button id="equip-act">{$game_text['actions_short']}</button>
  </div>
</div>
EOF;

    drupal_add_js(drupal_get_path('module', 'stlouis')
      . '/game_show_aides_menu_equip.js', 'module', 'footer');
  }

  if ($staff_active && $game_user->level >= 25) {
    echo <<< EOF
<div class="news secondary">
  <div class="news-buttons">
    <button id="staff-staff">Staff</button>
    <button id="staff-agent">Agents</button>
    <button id="staff-all" class="active">All</button>
    <button id="staff-ini">{$game_text['initiative_short']}</button>
    <button id="staff-end">{$game_text['endurance_short']}</button>
    <button id="staff-elo">{$game_text['elocution_short']}</button>
  </div>
</div>

<div class="news secondary">
  <div class="news-buttons">
    <button id="staff-buy">Hireable</button>
    <button id="staff-sal">Fireable</button>
    <button id="staff-upk">Upkeep</button>
    <button id="staff-eng">{$game_text['energy']}</button>
    <button id="staff-act">{$game_text['actions_short']}</button>
  </div>
</div>
EOF;

    drupal_add_js(drupal_get_path('module', 'stlouis')
      . '/game_show_aides_menu_staff.js', 'module', 'footer');
  }

//  _show_goal($game_user);

 if (!empty($title)) {
   echo <<< EOF
<div class="title">
  $title
</div>
EOF;
  }
}

function game_show_elections_menu(\stdClass $game_user) {

  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  $arg2 = check_plain(arg(2));

  if (substr(arg(1), 0, 7) == 'debates') {
    $debates_active = 'active';
  }
  if (substr(arg(1), 0, 9) == 'elections') {
    $elections_active = 'active';
  }
  if (substr(arg(1), 0, 3) == 'top') {
    $top_active = 'active';
  }
  if (substr(arg(1), 0, 5) == 'top20') {
    $top20_active = 'active';
  }
  if (substr(arg(1), 0, 12) == 'top_alderman') {
    $topalders_active = 'active';
  }

  echo <<< EOF
<div class="news">
<a href="/$game/debates/$arg2" class="button $debates_active">{$debate_tab}</a>
<a href="/$game/elections/$arg2" class="button $elections_active">{$election_tab}</a>
<a href="/$game/top20/$arg2" class="button $top20_active">$top20</a>
<a href="/$game/top_aldermen/$arg2" class="button $topalders_active">Top $alders_short</a>
</div>
EOF;

//  _show_goal($game_user);
}

function game_show_profile_menu(\stdClass $game_user) {

  global $game, $phone_id;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  $arg2 = check_plain(arg(2));
  $arg3 = check_plain(arg(3));

  if (arg(1) == 'user') {
    $user_active = 'active';
  }
  if (arg(1) == 'user_favors') {
    $favor_active = 'active';
  }
  if (arg(1) == 'favor_perform') {
    $favor_active = 'active';
    $arg3 = '';
  }
  if (arg(1) == 'user_comp') {
    $comp_active = 'active';
  }

  echo <<< EOF
<div class="news">
  <a href="/$game/user/$arg2/$arg3" class="button $user_active">Profile</a>
  <!--<a href="/$game/user_favors/$arg2/$arg3"
    class="button $favor_active">{$favor}s</a>-->
  <a href="/$game/user_comp/$arg2/$arg3"
    class="button $comp_active">$competencies</a>
</div>
EOF;

//  _show_goal($game_user);
}

/**
 * Show the quest as a slide.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param \stdClass $item
 *   The quest object.
 */
function game_show_quest_slide(\stdClass $game_user, \stdClass $item) {

  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
//firep($item, 'quest given to game_show_quest_slide()');
  $sql = 'select id from quests where `group` = %d
    order by id asc limit 1;';
  $result = db_query($sql, $item->group);
  $data = db_fetch_object($result);
  $seq_num = $item->id - $data->id;

  $name = t($item->name, [
    '@clan' => $game_user->clan_name,
    '@hood' => $game_text['hood'],
    '@location' => $game_user->location,
    '%party' => $game_user->party_title,
    '@username' => $game_user->username,
  ]);

  $description = t($item->description, [
    '@clan' => $game_user->clan_name,
    '@hood' => $game_text['hood'],
    '@location' => $game_user->location,
    '%party' => $game_user->party_title,
    '@username' => $game_user->username,
  ]);

  if (empty($item->completed_percent)) {
    $item->completed_percent = 0;
  }

  $active = ($item->active) ? '' : ' (inactive)';
  $img = $item->icon_path;

  $wrong_hood = $wrong_hood_wrapper = $wrong_hood_overlay = $comment_start
    = $comment_end = $go_there = '';

  // Need a specific hood?  Tell him/her to move.
  if ($item->fkey_neighborhoods_id &&
      ($item->fkey_neighborhoods_id != $game_user->fkey_neighborhoods_id)) {
    $wrong_hood = 'wrong-hood';
    $wrong_hood_wrapper = 'wrong-hood-wrapper';
    $description = t('This @quest can only be completed in %hood.',
      ['@quest' => $game_text['quest_lower'], '%hood' => $item->hood]);
    $comment_start = '<!-- ';
    $comment_end = ' -->';
    $wrong_hood_overlay = <<< EOF
<img class="wrong-hood-overlay colorize-{$item->wrong_hood_color}"
  src="http://www.clker.com/cliparts/a/Y/q/g/B/G/simple-black-car-th.png"
  alt="{$item->actions_to_move} actions to move">
EOF;
    $go_there = t('Go there');
    if ($item->actions_to_move > 0) {
      $go_there .= " ({$item->actions_to_move}@)";
    }
    $go_there = <<< EOF
<form action="/$game/move/$arg2/$item->fkey_neighborhoods_id">
  <div class="quests-perform-button-wrapper $wrong_hood_wrapper">
    <input class="quests-perform-button $wrong_hood" type="submit" value="{$go_there}"/>
    $wrong_hood_overlay
  </div>
</form>
EOF;
    $wrong_hood_overlay = $comment_start . $wrong_hood_overlay . $comment_end;
  }

  // Need a higher level?
  if ($item->required_level > $game_user->level) {
    $wrong_hood = 'not-yet';
    $wrong_hood_wrapper = 'not-yet-wrapper';
    $description .= '<div class="not-yet">' . t('Requires level @level',
      ['@quest' => $game_text['quest_lower'], '@level' => $item->required_level]) .
      '</div>';
    $comment_start = '<!-- ';
    $comment_end = ' -->';
    $wrong_hood_overlay = <<< EOF
<span class="not-yet-overlay">Soon</span>
EOF;
    $go_there = '';
  }

  // Show the quest!
  echo <<< EOF
$item->quest_completion_html
$item->outcome
$item->loot_html
<div class="quests">
  <div class="quest-icon $wrong_hood_wrapper">
    {$comment_start}<a href="/$game/quests_do/$arg2/$item->id">{$comment_end}
      <img src="$img" border="0" width="96" class="round4 $wrong_hood"
      style="box-shadow: #{$item->rgb} 3px 3px 6px; border-color: #{$item->rgb}">
      $wrong_hood_overlay
      <div class="quest-icon-baseline-overlay"></div>
      <div class="quest-icon-overlay" style="$item->completed_percent_overlay"></div>
    {$comment_start}</a>{$comment_end}
    <div class="quest-complete">
      <div class="quest-complete-percentage"
        style="background-color: #{$item->rgb}; width: {$item->width}px">
        &nbsp;
      </div>
      <div class="quest-complete-text">
        $item->completed_percent% complete
      </div>
    </div>
  </div>

  <div class="quest-details">
    <div class="quest-num">$item->group.$seq_num</div>
    <div class="quest-name $wrong_hood">
      {$comment_start}<a href="/$game/quests_do/$arg2/$item->id">{$comment_end}
        $name $active
      {$comment_start}</a>{$comment_end}
    </div>
    <div class="quest-description {$wrong_hood}">
      $description
    </div>
EOF;

  if (strlen($wrong_hood)) {
    // Wrong hood?  Show nothing.
  }
  elseif (empty($item->exp_added_str)) {
    // No quest performed -- show disbursements and requirements.
    echo <<< EOF
    <div class="quest-disbursements">
      // Disbursements //
    </div>
    <div class="quest-experience">
      +$item->experience $experience, 
      +$item->min_money to $item->max_money $game_user->values
    </div>
EOF;

    $chance_of_loot = $item->chance_of_loot + $item->chance_of_loot_staff;

    if ($chance_of_loot > 0) {

      $chance_modifier = '';
      if ($chance_of_loot <= 20) {
        $chance_modifier = t('Low');
      }
      elseif ($chance_of_loot >= 40) {
        $chance_modifier = t('High');
      }
      echo <<< EOF
  <div class="quest-loot">$chance_modifier Chance of Loot!</div>
EOF;
    }

    echo <<< EOF
    <div class="quest-requisites">
      // Consumptions //
    </div>
    <div class="quest-required_energy">
      Requires $item->required_energy ${game_text['energy']}
    </div>
EOF;

    if ($item->clan_equipment_1_consumed_quantity > 0) {
      echo '<div class="quest-required_stuff">';
      _clan_required_equipment($game_user,
        $item->fkey_clan_equipment_1_consumed_id,
        $item->clan_equipment_1_consumed_quantity);
      echo '</div>';
    }

    if ($item->land_required_quantity +
      $item->equipment_1_required_quantity +
      $item->equipment_2_required_quantity +
      $item->equipment_3_required_quantity +
      $item->clan_equipment_1_required_quantity +
      $item->staff_required_quantity > 0) {

      echo <<< EOF
    <div class="quest-requisites">
      // Requisites //
    </div>
EOF;

      // Required land.
      if ($item->land_required_quantity > 0) {
        _required_land($game_user, $item->fkey_land_required_id,
          $item->land_required_quantity);
      }

      // Required equipment.
      if ($item->equipment_1_required_quantity +
        $item->equipment_2_required_quantity +
        $item->equipment_3_required_quantity +
        $item->clan_equipment_1_required_quantity > 0) {

        echo '<div class="quest-required_stuff">';

        if ($item->equipment_1_required_quantity > 0) {
          game_required_equipment($game_user, $item->fkey_equipment_1_required_id,
            $item->equipment_1_required_quantity);
        }

        if ($item->equipment_2_required_quantity > 0)
          game_required_equipment($game_user, $item->fkey_equipment_2_required_id,
            $item->equipment_2_required_quantity);

        if ($item->equipment_3_required_quantity > 0)
          game_required_equipment($game_user, $item->fkey_equipment_3_required_id,
            $item->equipment_3_required_quantity);

        if ($item->clan_equipment_1_required_quantity > 0)
          _clan_required_equipment($game_user,
            $item->fkey_clan_equipment_1_required_id,
            $item->clan_equipment_1_required_quantity);

        echo '</div>';
      }

      // Required staff.
      if ($item->staff_required_quantity > 0)
        game_required_staff($game_user, $item->fkey_staff_required_id,
          $item->staff_required_quantity);

      // Required party.
      if ($item->need_party > 0)
        echo <<< EOF
    <div class="quest-required_energy">
      You must belong to a non-Underground $party_lower
    </div>
EOF;

      // Required clan.
      if ($item->need_clan > 0)
        echo <<< EOF
    <div class="quest-required_energy">
      You must belong to a clan
    </div>
EOF;

      // Required job.
      if ($item->need_job > 0)
        echo <<< EOF
    <div class="quest-required_energy">
      You must have a job
    </div>
EOF;

    }
  }
  else {
    // Quest performed -- show accomplishments.
    echo <<< EOF
    <div class="quest-experience">
      $item->exp_added_str <strong>$experience</strong>
    <br>
      $item->money_added_str <strong>$game_user->values</strong>
    </div>
  </div>
  <!--$item->loot_html-->
  <div class="quest-do-again">
    <div class="quest-do-again-inside">
      <a href="/$game/quests_do/$arg2/$item->id">
        Do Again
      </a>
    </div>
EOF;
  }

  echo <<< EOF
  </div>
  $go_there
</div>
EOF;
}

/**
 * Find the icon path for a given type.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param \stdClass $obj
 *   The quest, etc. object.
 * @param string $type
 *   The type of object.
 */
function game_get_icon_path(\stdClass $game_user, \stdClass $obj, $type) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  if (strpos($obj->meta, 'use_job_picture') !== FALSE) {
    $sql = 'SELECT land.id FROM `land_ownership`
      LEFT JOIN land ON fkey_land_id = land.id
      WHERE fkey_users_id = %d
      AND land.type = "job";';
    $result = db_query($sql, $game_user->id);
    $job = db_fetch_object($result);
    $obj->icon_path = '/sites/default/files/images/land/' . "$game-$job->id.png?3";
  }
  else {
    $icon_path = base_path() . file_directory_path() . '/images/' . $type . '/' . $game . '-' . $obj->id;

    if (file_exists($_SERVER['DOCUMENT_ROOT'] . $icon_path . '.jpg')) {
      $obj->icon_path = $icon_path . '.jpg';
    }
    else {
      $obj->icon_path = $icon_path . '.png';
    }
  }
}

function game_competency_gain(\stdClass $game_user, $id, $level = 1) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  // If id is string, find numerical id.
  if (gettype($id) == 'string') {

    $sql = 'select * from competencies where name = "%s";';
    $result = db_query($sql, $id);
    $item = db_fetch_object($result);

    if (!empty($item)) {
      $id = (int) $item->id;
    }
    else {
      // Not found! Create it!
      $sql = 'insert into competencies (name, level) values ("%s", %d);';
      db_query($sql, $id, $level);

      $sql = 'select * from competencies where name = "%s";';
      $result = db_query($sql, $id);
      $item = db_fetch_object($result);
      $id = (int) $item->id;
    }
  }
  else {
    $sql = 'select * from competencies where id = %d;';
    $result = db_query($sql, $id);
    $item = db_fetch_object($result);
  }

  $sql = 'select use_count, timestamp from user_competencies
    where fkey_competencies_id = %d and fkey_users_id = %d;';
  $result = db_query($sql, $id, $game_user->id);
  $data = db_fetch_object($result);

  if (game_timed_bonus_in_effect($game_user, 'fast_comps_30')->allowed) {
    $competency_gain_wait_time = min($competency_gain_wait_time, 30);
  }
  if (game_timed_bonus_in_effect($game_user, 'fast_comps_15')->allowed) {
    $competency_gain_wait_time = min($competency_gain_wait_time, 15);
  }

  if ((REQUEST_TIME - strtotime($data->timestamp)) < $competency_gain_wait_time) {
firep('Last gain of competency &quot;' . $item->name . '&quot; too recent');
    return FALSE;
  }

  // Already there.
  if (!empty($data)) {

    $comp_before = game_competency_level($game_user, $id);
    $sql = 'update user_competencies set use_count = use_count + 1
      where fkey_competencies_id = %d and fkey_users_id = %d;';
    db_query($sql, $id, $game_user->id);
    $comp_after = game_competency_level($game_user, $id);

    // Leveled up!
    if ($comp_after->level > $comp_before->level) {
      game_send_user_message(1, $game_user->id, 1,
        'You have increased your competency &quot;<span class="initial-caps">'
      . $item->name . '</span>&quot;!&nbsp; You are now '
      . $comp_after->level_name_2 . ' and have gained '
      . $comp_after->level . ' luck.', 'comp');

      $sql = 'update users set luck = luck + %d where id = %d;';
      db_query($sql, $comp_after->level, $game_user->id);
    }

  }

  // New competency.  Tell user about it if above level 6.
  else {
    $sql = 'insert into user_competencies
      (fkey_users_id, fkey_competencies_id, use_count) values
      (%d, %d, 1);';
    db_query($sql, $game_user->id, $id);
    if ($game_user->level > 6) {
      game_send_user_message(1, $game_user->id, 1,
      'You have started learning a new competency, &quot;<span class="initial-caps">'
      . $item->name . '</span>&quot;!', 'comp');
    }
  }

  return TRUE;
}

/**
 * Debit (use) an amount of action from (by) the user.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param int $quantity
 *   The quantity of action to debit.
 *
 * @return bool
 *   Whether the action(s) could be debited from the game user.
 */
function game_action_use(\stdClass $game_user, $quantity = 1) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  if ($quantity < 1) {
    return TRUE;
  }
  if ($game_user->actions < $quantity) {
    return FALSE;
  }

  $sql = 'update users set actions = actions - %d
    where id = %d;';
  db_query($sql, $quantity, $game_user->id);

  // Start the actions clock, if needed.
  if ($game_user->actions == $game_user->actions_max) {
    $sql = 'update users set actions_next_gain = "%s" where id = %d;';
    db_query($sql, date('Y-m-d H:i:s', REQUEST_TIME + 180),
      $game_user->id);
  }

  // Reprocess user object.
  $game_user = zg_fetch_user();
  return TRUE;
}

/**
 * Update a user's karma.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param string $text
 *   Explanatory text.
 * @param int $quantity
 *   How much karma to add (subtract).
 *
 * @return bool
 *   Whether the update was successful or not.
 */
function game_karma(\stdClass $game_user, $text, $quantity) {
  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  $sql = 'update users set karma = karma + %d where id = %d;';
  db_query($sql, $quantity, $game_user->id);

  $sql = 'insert into karma (fkey_users_id, text, amount) values
    (%d, "%s", %d);';
  db_query($sql, $game_user->id,
    "$game_user->username gained/lost $quantity karma " .
    "(was: $game_user->karma) for: $text", $quantity);

  // Reprocess user object.
  $game_user = zg_fetch_user();
  return TRUE;
}

/**
 * Update a user's luck.  Log to the appropriate database.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param int $quantity
 *   The amount of luck to credit (debit).
 * @param string $text
 *   Explanatory text.
 * @param string $type
 *   Type of update: purchase, use, system_gift.
 * @param string $subtype
 *   Subtype of $type.
 */
function game_luck(\stdClass &$game_user, $quantity, $text, $type, $subtype) {
  return zg_luck($game_user, $quantity, $game_user->luck, $quantity, $game_user->luck + $quantity, $text, $type, $subtype);

  global $game;
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';

  $sql = 'update users set luck = luck + %d
    where id = %d;';
  db_query($sql, $quantity, $game_user->id);

  switch ($type) {

    case 'purchase':
      $sql = 'insert into purchases (fkey_users_id, amount_now, amount_purchased, purchase)
        values (%d, %d, %d, "%s");';
      db_query($sql, $game_user->id, $game_user->luck, $quantity, $text);
      mail('joseph@ziquid.com', $game . ' Luck purchase', $text);
      break;

  }

  // Reprocess user object.
  $game_user = zg_fetch_user();
  return TRUE;
}

function game_competency_level(\stdClass $game_user, $id) {

  // Return the user's competency level [0..5] for a given competency.
  include drupal_get_path('module', check_plain(arg(0))) . '/game_defs.inc';

  // Find id from string.
  if (gettype($id) == 'string') {

    $sql = 'select * from competencies where name = "%s";';
    $result = db_query($sql, $id);
    $item = db_fetch_object($result);

    if (!empty($item)) {
      $id = $item->id;
    }
    else {
      echo 'competency_level for id ' . $id . ' doesn\'t exist!';
      slack_send_message('competency_level for id ' . $id . 'doesn\'t exist!',
        $slack_channel);
      slack_send_message(print_r($game_user, TRUE), $slack_channel);
      die;
    }

  }
  else {
    $sql = 'select * from competencies where id = %d;';
    $result = db_query($sql, $id);
    $item = db_fetch_object($result);
  }

  $sql = 'select use_count from user_competencies
    where fkey_competencies_id = %d and fkey_users_id = %d;';
  $result = db_query($sql, $id, $game_user->id);
  $comp = db_fetch_object($result);

  if (!is_object($comp)) {
    $comp = new stdClass();
    $comp->use_count = 0;
  }

  $level = 0;

  while ($level <= 5) {

    $min = game_competency_min_count($level, $item->level);
    $max = game_competency_min_count($level + 1, $item->level);

    if ($comp->use_count >= $min && $comp->use_count < $max) {
      $comp->level = $level;
      $comp->min = $min;
      $comp->max = $max;
      $comp->next = $max;

      // Cannot attain next level.
      if ($level == 5) {
        $comp->next = $comp->use_count;
      }

      break;
    }

    $level++;

  }

  $comp->level_name = game_competency_level_name($comp->level, TRUE);
  $comp->level_name_2 = game_competency_level_name($comp->level);
  return $comp;
}

/**
 * Show text if certain comp. level has been obtained.
 *
 * @param \stdClass $game_user
 *   The game_user object.
 * @param string $text
 *   The text to show.
 * @param int $level_obtained
 *   The comp. level obtained.
 * @param int $level_needed
 *   The comp. level needed.
 */
function game_show_by_level(\stdClass $game_user, $text, $level_obtained, $level_needed = 0) {
  if ($level_obtained >= $level_needed) {
    if ($game_user->meta == 'admin') {
      $level_debug = ' (' . $level_obtained . ':' . $level_needed . ')';
      if (substr($text, -4) === '<br>') {
        $text = str_replace('<br>', $level_debug . '<br>', $text);
      }
      else {
        $text .= $level_debug;
      }
    }
    print $text;
  }
}

function game_competency_min_count($level, $comp_level) {

  // Return the minimum use count for a given level [0..5] and competency level.
  // [1..3].
  $min_count = [
    1 => [
      0,
      20,
      60,
      150,
      300,
      500,
      PHP_INT_MAX
    ],
    2 => [
      0,
      10,
      30,
      75,
      150,
      250,
      PHP_INT_MAX
    ],
    3 => [
      0,
      2,
      6,
      15,
      30,
      50,
      PHP_INT_MAX
    ],
  ];

  return $min_count[$comp_level][$level];
}


function game_competency_level_name($id, $req = FALSE) {

  if ($req) {
    $competencies = [
      'No Comp\'cy',
      'Minimal Comp\'cy',
      'Marginal Comp\'cy',
      'Normal Comp\'cy',
      'More Comp\'cy',
      'Masterful Comp\'cy',
    ];
  }
  else {
    $competencies = [
      'Not Comp.',
      'Minimally Comp.',
      'Marginally Comp.',
      'Normally Comp.',
      'More Comp.',
      'Masterfully Comp.',
    ];
  }

  return $competencies[$id];
}

function game_competency_name($comp) {
  $comps = &drupal_static(__FUNCTION__, []);

  if (!count($comps)) {
    $sql = 'select name from competencies;';
    $result = db_query($sql);
    while ($item = db_fetch_object($result)) {
      $comps[$item->name] = $item->name;
    }
  }

  game_alter('comp_names_alter', NULL, $comps);
  return $comps[$comp];
}

function game_fetch_user_by_id($id) {

  return zg_fetch_user_by_id($id);

  // Simple per-page cache.
  static $user_cache;

  if (!empty($user_cache[$id])) {
    firep("query for user $id resulted in cached object");
    // Jwc 05Jul2013 -- don't return cached results.
    // Until we can reliably invalidate the cache.
//    return $user_cache[$id];
  }

  // Find id from phone_id.
  if (gettype($id) == 'string') {
    $where = 'WHERE users.phone_id = "%s"';
  }
  else {
    $where = 'WHERE users.id = %d';
  }

  $sql = 'SELECT users.*,
    user_creations.datetime as startdate,
    `values`.party_title, `values`.party_icon,
    elected_positions.name as ep_name,
    elected_positions.id as ep_level,
    elected_officials.approval_rating,
    elected_positions.energy_bonus as ep_energy_bonus,

    clan_members.is_clan_leader,
    clans.name as clan_name, clans.acronym as clan_acronym,
    clans.id as fkey_clans_id,
    event_points.points,

    neighborhoods.name as location

    FROM `users`

    LEFT JOIN `values` ON users.fkey_values_id = `values`.id

    LEFT OUTER JOIN elected_officials
    ON elected_officials.fkey_users_id = users.id

    LEFT OUTER JOIN elected_positions
    ON elected_positions.id = elected_officials.fkey_elected_positions_id

    LEFT OUTER JOIN clan_members on clan_members.fkey_users_id = users.id

    LEFT OUTER JOIN clans on clan_members.fkey_clans_id = clans.id

    LEFT JOIN user_creations on user_creations.phone_id = users.phone_id

    LEFT JOIN event_points on event_points.fkey_users_id = users.id

    LEFT JOIN neighborhoods on users.fkey_neighborhoods_id = neighborhoods.id

    ' . $where . ';';

  $result = db_query($sql, $id);
  $item = db_fetch_object($result);

//   if (empty($item->ep_name)) $item->ep_name = 'Subjugate';
  if (empty($item->ep_level)) {
    $item->ep_level = 0;
  }
  $user_cache[$id] = $item;

firep($item, 'game_fetch_user_by_id for id ' . $id);
  return $item;
}

/**
 * Send a user a message.
 *
 * @param int $from
 *   From user id.
 * @param int|int[] $to
 *   To user id, or array of uids.  Note: assumes presence of $to[0].
 * @param int|bool $private
 *   1/TRUE if this is a private message, 0/FALSE otherwise.
 * @param string $message
 *   The message.
 * @param string $subtype
 *   Subtype of message.  See db for allowed subtypes.
 *
 * @return bool
 *   Whether the user message succeeded or not (for a single uid),
 *   or whether ALL messages succeeded or not (for an array of uids).
 */
function game_send_user_message($from, $to, $private = 0, $message, $subtype = 'user') {
  $message = nl2br($message);
  if (is_array($to) && is_numeric($to[0])) {
    $result = TRUE;
    foreach ($to as $item) {
      $result &= game_send_user_message($from, $item, $private, $message, $subtype);
    }
    return $result;
  }
  else {
    $sql = 'insert into user_messages (fkey_users_from_id, fkey_users_to_id,
      private, message, subtype) values (%d, %d, %d, "%s", "%s");';
    return db_query($sql, $from, $to, (int) $private, $message, $subtype);
  }
}

/**
 * Send a system message.
 *
 * @param int $from
 *   From user id.
 * @param string $message
 *   The message.
 * @param string $subtype
 *   Subtype of message.  See db for allowed subtypes.
 *
 * @return bool
 *   Whether the message succeeded or not.
 */
function game_send_system_message($from, $message, $subtype = 'system') {
  $sql = 'insert into system_messages (subtype, fkey_users_from_id,
    fkey_users_to_id, message) values ("%s", %d, 0, "%s");';
  return db_query($sql, $subtype, $from, $message);
}

function game_zombie_name() {

  $first = [
    'Angry',
    'Beastly',
    'Creepy',
    'Dreadful',
    'Eerie',
    'Ferocious',
    'Gruesome',
    'Heinous',
    'Infected',
    'Jaundiced',
    'Killer',
  ]; // https://s-media-cache-ak0.pinimg.com/736x/d5/87/a4/d587a4917ff097a6ed2697e5b84dc4c7.jpg

  $last = [
    'Quilter',
    'Rogue',
    'Suck-Up',
    'Twitcher',
    'Undead',
    'Voter',
    'Walker',
    'Xtra Creep',
    'Yard Bump',
    'Zero',
  ];

  return 'PoliZombie ' . $first[mt_rand(0, count($first) - 1)] . ' '
    . $last[mt_rand(0, count($last) - 1)];

}

/**
 * Can I perform an action yet?
 *
 * @param \stdClass $game_user
 *   The user object.
 * @param string $key
 *   The key to check.
 *
 * @return \stdClass
 *   An object with whether the action can be performed; if FALSE, also the
 *   hours, minutes, and seconds until action can be performed.
 */
function game_can_do_yet($game_user, $key) {
  $can_do = new stdClass();
  $can_do->time_ready = (int) zg_get_value($game_user, $key, REQUEST_TIME);
  $can_do->time_remaining = $can_do->time_ready - REQUEST_TIME;

  if ($can_do->time_remaining > 0) {
    $can_do->allowed = FALSE;
    $can_do->hours_remaining = floor($can_do->time_remaining / 3600);
    $minutes_remaining_in_sec = $can_do->time_remaining % 3600;
    $can_do->minutes_remaining = floor($minutes_remaining_in_sec / 60);
    $can_do->seconds_remaining = floor($minutes_remaining_in_sec % 60);
  }
  else {
    $can_do->allowed = TRUE;
  }

  return $can_do;
}

/**
 * Timed bonus still in effect?
 *
 * Logically the opposite of game_can_do_yet().
 *
 * @param \stdClass $game_user
 *   The user object.
 * @param string $key
 *   The key to check.
 *
 * @return \stdClass
 *   An object with whether a bonus is in effect and the hours, minutes, and
 *   seconds remaining, or FALSE.
 */
function game_timed_bonus_in_effect($game_user, $bonus_key) {
  $in_effect = new stdClass();
  $in_effect->time_ready = (int) zg_get_value($game_user, $bonus_key, REQUEST_TIME);
  $in_effect->time_remaining = $in_effect->time_ready - REQUEST_TIME;

  if ($in_effect->time_remaining > 0) {
    $in_effect->allowed = TRUE;
    $in_effect->hours_remaining = floor($in_effect->time_remaining / 3600);
    $minutes_remaining_in_sec = $in_effect->time_remaining % 3600;
    $in_effect->minutes_remaining = floor($minutes_remaining_in_sec / 60);
    $in_effect->seconds_remaining = floor($minutes_remaining_in_sec % 60);
  }
  else {
    $in_effect->allowed = FALSE;
  }

  return $in_effect;
}

/**
 * Set timer for user (either for bonus or disallowed action).
 *
 * @param \stdClass $game_user
 *   The user object.
 * @param string $timer_key
 *   The key to set.
 * @param int $time_secs
 *   The number of seconds to set for the timer.
 */
function game_set_timer($game_user, $timer_key, $time_secs) {
  game_set_value($game_user, $timer_key, REQUEST_TIME + $time_secs);
}

/**
 * Return the value for the key in the db if found, or $default if not found.
 *
 * @param \stdClass $game_user
 *   The game_user object.
 * @param string $key
 *   The key to use for the query.
 * @param mixed $default
 *  The result to return if KVP is not found.
 *
 * @return mixed
 *   The value, if found, or $default, if not found.
 */
function game_get_value($game_user, $key, $default = NULL) {
  $sql = 'SELECT `value` FROM {user_attributes}
    WHERE `fkey_users_id` = %d AND `key` = "%s";';
  $result = db_query($sql, (int) $game_user->id, $key);
  $item = db_fetch_object($result);
//  firep($item, 'user_attributes value for key ' . $key);

  // Serialized data?  Undo it.
  if (substr($item->value, 0, 11) == 'serialized:') {
    return unserialize(substr($item->value, 11));
  }

  return !empty($item->value) ? $item->value : $default;
}

/**
 * Set a value for a certain key for the game user.
 *
 * Updates the value if the KVP already exists.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param string $key
 *   The key to use for the value in the db.
 * @param string $value
 *   The value to set in the db.
 *
 * @return bool
 *   TRUE if the set succeeded; FALSE otherwise.
 */
function game_set_value($game_user, $key, $value = "set") {

  // Array?  Serialize the data before storing.
  if (is_array($value)) {
    $value = 'serialized:' . serialize($value);
  }
  $sql = 'INSERT INTO {user_attributes}
    (`fkey_users_id`, `key`, `value`) VALUES (%d, "%s", "%s")
    ON DUPLICATE KEY UPDATE `value` = "%s", last_update = CURRENT_TIMESTAMP;';
  return db_query($sql, $game_user->id, $key, $value, $value);
}

/**
 * Remove a KVP for a user.
 *
 * @param \stdClass $game_user
 *   The game user object.
 * @param string $key
 *   The key to remove.
 *
 * @return bool
 *   Whether the removal succeeded or not.
 */
function game_remove_value($game_user, $key) {
  $sql = 'delete from {user_attributes}
    where `fkey_users_id` = %d and `key` = "%s";';
  return db_query($sql, $game_user->id, $key);
}

/**
 * Return the amount of money the game offers for one Luck.
 *
 * @param \stdClass $game_user
 *   The game's user object.
 *
 * @return array
 *   The offer.
 */
function game_luck_money_offer($game_user) {
  return zg_luck_money_offer($game_user);
}

/**
 * Alter the game based on e.g. an event.
 *
 * All parameters after $hook are passed straight to the event's hook
 * function.  Traditionally $game_user is the first parameter passed.
 *
 * @param string $hook
 *   Which hook to call.
 * @param \stdClass $game_user
 *   The game's user object.
 *
 * @return bool
 *   TRUE if any hooks exist and returned TRUE.  FALSE otherwise.
 */
function game_alter($hook, $game_user, &$garg2 = NULL, &$garg3 = NULL, &$garg4 = NULL) {
  global $game;

  $retval = FALSE;
  $game_include_list = game_includes_get();

  // Find and call hook(s).
  foreach ($game_include_list as $type_include_file) {
    $include_file = substr($type_include_file, strpos($type_include_file, '/') + 1);
    $function_name = 'game_' . $include_file . '_' . $hook;
    if (function_exists($function_name)) {
//      dpm('calling ' . $function_name);
      $retval |= $function_name($game_user, $garg2, $garg3, $garg4);
    }
    else {
//      dpm('function ' . $function_name . ' does not exist!');
    }
  }

  return $retval;
}

/**
 * Add a file to the list of includes.  Run its init hook, if it exists.
 *
 * Will ignore multiple submissions of the same file and any missing files.
 *
 * @param string $include_file
 *   The file to include.
 * @param string $type
 *   The type file inclusion.
 */
function game_includes_add($include_file, $type) {
  global $game;
//dpm ($include_file, 'calling game_includes_add for ' . $type . ' file');
  $game_include_list = &drupal_static('game_include_list', []);
  $game_include_missing = &drupal_static('game_include_missing', []);
  $module_path = drupal_get_path('module', $game);
  $file_to_include = $module_path . '/includes/' . $type . '/' . $include_file . '.inc';

  // Already in include list; return.
  if (in_array($type . '/' . $include_file, $game_include_list)) {
//    dpm($game_include_list, $type . '/' . $include_file .
// ' is already in game include list, not adding again');
    return;
  }

  // Already in missing list; return.
  if (in_array($type . '/' . $include_file, $game_include_missing)) {
//    dpm($game_include_missing, $type . '/' . $include_file .
// ' is already in game include missing list, not adding again');
    return;
  }

  if (file_exists($file_to_include)) {
    $game_include_list[] = $type . '/' . $include_file;
    include_once $file_to_include;
//    dpm('including file ' . $file_to_include);
    $function_name = 'game_' . $include_file . '_init';
    if (function_exists($function_name)) {
//      dpm('calling ' . $function_name);
      $function_name();
    }
  }
  else {
    // File does not exist; add to missing list.
    $game_include_missing[] = $type . '/' . $include_file;
  }
}

/**
 * Return the list of includes.
 *
 * @return string[]
 *   The list of includes.
 */
function game_includes_get() {
  $game_include_list = &drupal_static('game_include_list', []);
  return $game_include_list;
}

/**
 * Show the ai output, if necessary.
 *
 * @param $phone_id
 *   The user's phone ID.
 * @param $ai_output
 *   The output to show.
 */
function game_show_ai_output($phone_id, $ai_output) {
  if (substr($phone_id, 0, 3) == 'ai-') {
    echo "<!--\n<ai \"$ai_output\"/>\n-->";
  }
}

/**
 * Check to see if the user has a particular trait.
 *
 * Admin users automatically have all traits.
 *
 * @param \stdClass $game_user
 *   The game_user object.
 * @param string $trait
 *   The trait for which to check.
 *
 * @return bool
 *   Whether the user has that trait or not.
 */
function game_user_has_trait($game_user, $trait) {
  if ($game_user->meta == 'admin' ||
    (array_key_exists($trait, $game_user->traits) &&
    $game_user->traits[$trait])) {
    return TRUE;
  }
}

/**
 * How many actions necessary to move to a new hood?
 *
 * Also returns hood objects for from and to hood and verb used.
 *
 * @param object $game_user
 *   The game user object.
 * @param int $from_id
 *   The id of the hood moving from.
 * @param int $to_id
 *   The id of the hood moving to.
 *
 * @return array
 *   Returns the from hood object, the to hood object, the number of actions to
 *   move, and the verb used to display the move.
 */
function game_get_actions_to_move($game_user, $from_id, $to_id) {
  return zg_get_actions_to_move($game_user, $from_id, $to_id);
}
