<?php

/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * Adds a JavaScript snippet to selected page responses to trigger analytics and
 * other tracking items configured using the Google Tag Manager.
 *
 * @author Drupal 6 port by Ed Reel (https://www.drupal.org/u/uberhacker)
 */

/**
 * Default list of relative paths.
 */
define('GOOGLETAGMANAGER_PATHS', "admin*\nbatch*\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Default list of HTTP response statuses that override path conditions.
 */
define('GOOGLETAGMANAGER_STATUSES', "403 Forbidden\n404 Not Found");

/**
 * Implements hook_help().
 */
function google_tag_help($path, $arg) {
  switch ($path) {
    case 'admin/help#google_tag':
    case 'admin/settings/google_tag':
      $text = t('Google Tag Manager');
      $link = l($text, 'https://www.google.com/analytics/tag-manager/');
      return t('!link is a free service (registration required) to manage the insertion of tags for capturing website analytics.', array('!link' => $link));
  }
}

/**
 * Implements hook_menu().
 */
function google_tag_menu() {
  $items = array();
  $items['admin/settings/google_tag'] = array(
    'title' => 'Google Tag Manager',
    'description' => 'Configure the website integration with GTM and the resultant capturing of website analytics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_tag_settings_form'),
    'access arguments' => array('administer google tag manager'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function google_tag_perm() {
  return array('administer google tag manager');
}

/**
 * Implements hook_preprocess().
 */
function google_tag_preprocess(&$vars, $hook) {
  if (!google_tag_insert_snippet()) {
    return;
  }

  $vars['google_tag_body'] = '';

  // Only applies to pages.
  if ($hook == 'page') {
    // Gather data.
    $container_id = variable_get('google_tag_container_id', '');
    $container_id = trim(drupal_to_js($container_id), '"');
    $compact = variable_get('google_tag_compact_tag', 1);

    // Build script tags.
    $noscript = <<<EOS
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=$container_id"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
EOS;

    $script = <<<EOS
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','$container_id');</script>
<!-- End Google Tag Manager -->
EOS;

    if ($compact) {
      $noscript = str_replace("\n", '', $noscript);
      $script = str_replace(array("\n", '  '), '', $script);
    }

    // Insert script snippet in the head section.
    drupal_set_html_head($script);

    // Insert noscript snippet after the opening body tag.
    $vars['google_tag_body'] = $noscript;
  }
}

/**
 * Returns the state of snippet insertion on the current page response.
 *
 * @return bool
 *   TRUE if the conditions are met; FALSE otherwise.
 */
function google_tag_insert_snippet() {
  global $user;

  $id = variable_get('google_tag_container_id', '');

  if (empty($id)) {
    // No container ID.
    return FALSE;
  }
  if (!_google_tag_status_check() && !_google_tag_path_check()) {
    // Omit snippet based on the response status and path conditions.
    return FALSE;
  }
  if (!_google_tag_role_check($user)) {
    // Omit snippet based on the user role condition.
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns state of snippet insertion based on HTTP response status code.
 *
 * @return bool
 *   TRUE if the status conditions are met; FALSE otherwise.
 */
function _google_tag_status_check() {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_status_toggle', 0);
    $statuses = variable_get('google_tag_status_list', GOOGLETAGMANAGER_STATUSES);

    if (!$toggle) {
      $satisfied = $toggle;
    }
    else {
      // Get the HTTP response status.
      $headers = drupal_get_headers();
      $satisfied = strpos($statuses, $headers) !== FALSE;
    }
  }
  return $satisfied;
}

/**
 * Returns state of snippet insertion based on HTTP request URI.
 *
 * @return bool
 *   TRUE if the path conditions are met; FALSE otherwise.
 */
function _google_tag_path_check() {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_path_toggle', 0);
    $paths = variable_get('google_tag_path_list', GOOGLETAGMANAGER_PATHS);

    // Meaning of $toggle.
    // - 0: all paths except listed paths.
    // - 1: only the listed paths.

    if (empty($paths)) {
      $satisfied = !$toggle;
    }
    else {
      // @todo Are not some paths case sensitive???
      // Convert the paths to lowercase before comparison.
      $paths = drupal_strtolower($paths);
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      $satisfied = drupal_match_path($path, $paths);
      // @todo Lowercase $_GET['q'] before comparison? What is purpose of this check?
      if ($path != $_GET['q']) {
        $satisfied = $satisfied || drupal_match_path($_GET['q'], $paths);
      }
      $satisfied = !($toggle xor $satisfied);
    }
  }
  return $satisfied;
}

/**
 * Returns state of snippet insertion based on user roles.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if the role conditions are met; FALSE otherwise.
 */
function _google_tag_role_check($account) {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_role_toggle', 0);
    $roles = variable_get('google_tag_role_list', array());

    // Meaning of $toggle.
    // - 0: all roles except listed roles.
    // - 1: only the listed roles.

    if (empty($roles)) {
      $satisfied = !$toggle;
    }
    else {
      $satisfied = FALSE;
      // Check user roles against listed roles.
      foreach (array_keys($account->roles) as $rid) {
        if (isset($roles[$rid]) && $roles[$rid] == $rid) {
          // User is a member of a listed role.
          $satisfied = TRUE;
          break;
        }
      }
      $satisfied = !($toggle xor $satisfied);
    }
  }
  return $satisfied;
}
