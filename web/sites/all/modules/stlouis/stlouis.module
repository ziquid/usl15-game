<?php

function stlouis_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#stlouis":
      $output = '<p>' .  t('Back end for <em>Uprising: St. Louis</em> game') . '</p>';
      break;
  }

  return $output;
}

function stlouis_perm() {
  return ['access stlouis content'];
}

require_once drupal_get_path('module', 'stlouis') . '/includes/menu.inc';
require_once drupal_get_path('module', 'stlouis') . '/includes/functions.inc';

/**
 * Implements hook_cron().
 */
function stlouis_cron() {
  global $game;
  $game = 'stlouis';
  define('REQUEST_TIME', time());

  db_set_active();
  include drupal_get_path('module', 'zg') . '/includes/' . $game . '_defs.inc';
  db_set_active('game_' . $game);

  // Save old approval ratings.
  $sql = 'update elected_officials set approval_45 = approval_30,
    approval_30 = approval_15, approval_15 = approval_rating;';
  db_query($sql);

  // Move all elected officials toward a 60% approval rating.
  $sql = 'update elected_officials set approval_rating = 60
    where (approval_rating >= 59.75 AND approval_rating <= 60.25);';
  db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating + 0.25
    where approval_rating <= 59.75;';
  db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating - 0.25
    where approval_rating >= 60.25;';
  db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 0 where approval_rating < 0;';
  db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 100 where approval_rating > 100;';
  db_query($sql);
/*

  // < 9AM -- 10 carolers every 15 mins.
  if (date('H') < 9) {
    $carolers_wanted = 20;
  }
  elseif (date('H') < 17) {

    // < 5PM -- 25 carolers.
    $carolers_wanted = 35;
  }
  else {

    // >= 5PM -- 50 carolers.
    $carolers_wanted = 55;
  }

  // Enjoy caroling?
  $sql = 'update neighborhoods
    set special_int = %d where special_int >= 0;';
  $result = db_query($sql, $carolers_wanted);

  // The grinch!
  $sql = 'update neighborhoods
    set special_int = -50
    where special_int > 0 and xcoor > 0
    order by rand()
    limit 20;';
  $result = db_query($sql);
*/

  // Zombies!
  $sql = 'select count(id) as count from users
    where meta = "zombie";';
  $result = db_query($sql);
  $item = db_fetch_object($result);
  $zombie_count = $item->count;

  if ($zombie_count > 0) {

    // Move them, enhance experience.
    $sql = 'update users set experience = floor(rand() * 1500000) + 1
      where meta = "zombie" order by rand() limit %d;';
    db_query($sql, ceil($zombie_count / 10));

    $sql = 'update users set experience = floor(rand() * 250000) + 1
      where meta = "zombie" order by rand() limit %d;';
    db_query($sql, ceil($zombie_count / 10));

    $sql = 'update users set fkey_neighborhoods_id = floor(rand() * 85) + 1,
      experience = experience + 10000
      where meta = "zombie" and fkey_neighborhoods_id = 81;';
    db_query($sql);

    $sql = 'update users set fkey_neighborhoods_id = floor(rand() * 85) + 1,
      experience = experience + 1000
      where meta = "zombie" order by rand() limit %d;';
    db_query($sql, ceil($zombie_count / 10));

    $sql = 'select * from levels;';
    $result = db_query($sql);
    $levels = [];
    while ($level = db_fetch_object($result)) {
      $levels[] = $level;
    }

    for ($a = 0; $a < count($levels) - 1 ; $a++) {
      $sql = 'update users set level = %d, elocution = %d
        where experience >= %d and experience < %d
        and meta = "zombie";';
      db_query($sql, $a + 1, $a * 2 + 2, $levels[$a]->experience,
        $levels[$a + 1]->experience - 1);
    }

  }

  // Unfreeze players.
  $sql = 'update users set meta = "" where meta = "frozen";';
  db_query($sql);

  // Move all hoods toward a 50 beauty rating.
  $sql = 'update neighborhoods set rating = 50
    where (rating >= 49.9 AND rating <= 50.1);';
  db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating + 0.1
    where rating < 49.9;';
  db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating - 0.1
    where rating > 50.1;';
  db_query($sql);

  // No alder?  Reset one hood to base stats.
  $sql = 'SELECT id, welcome_msg
    FROM neighborhoods
    WHERE id NOT IN (
      SELECT neighborhoods.id
      FROM neighborhoods
      RIGHT JOIN users ON users.fkey_neighborhoods_id = neighborhoods.id
      JOIN elected_officials ON elected_officials.fkey_users_id = users.id
      AND elected_officials.fkey_elected_positions_id = 1
    )
    ORDER BY RAND()
    LIMIT 1;';
  $result = db_query($sql);
  $item = db_fetch_object($result);

  if ($item->welcome_msg == 'Unmaintained and unloved, this neighborhood has atrophied.' ||
    $item->welcome_msg == '') {
    $welcome_msg = '';
  }
  else {
    $welcome_msg = 'Unmaintained and unloved, this neighborhood has atrophied.';
  }

  $sql = 'update neighborhoods set rating = 50, residents = 10,
    welcome_msg = "%s"
    where id = %d;';
  db_query($sql, $welcome_msg, $item->id);

  // Add one resident for each calendar month.
  $addition = (int) date('n');

  // Give hoods residents to match - each rating / 5 plus $addition.
  $sql = 'UPDATE `neighborhoods` SET residents = residents + 1
    WHERE floor(rating / 5) > (residents - %d) AND rand() > 0.9';
  db_query($sql, $addition);

  $sql = 'UPDATE `neighborhoods` SET residents = residents - 1
    WHERE floor(rating / 5) < (residents - %d) AND rand() > 0.9';
  db_query($sql, $addition);

  // April fools' 2018 -- move 25 people at random.
  if ($event_type == EVENT_APRIL_FOOLS) {
    $sql = 'SELECT users.id FROM users
    LEFT JOIN elected_officials ON users.id = elected_officials.fkey_users_id
    WHERE elected_officials.id IS NULL
    AND users.level >= 25
    ORDER BY rand()
    LIMIT 25;';
    $result = db_query($sql);
    $data = [];
    while ($item = db_fetch_object($result)) {
      $data[] = $item;
    }

    foreach ($data as $item) {
      $sql = 'SELECT id FROM neighborhoods WHERE xcoor > 0 AND ycoor > 0
      ORDER BY rand() LIMIT 1;';
      $result = db_query($sql);
      $hood = db_fetch_object($result);

      $sql = 'UPDATE users SET fkey_neighborhoods_id = %d
      WHERE id = %d;';
      db_dquery($sql, $hood->id, $item->id);
    }
  }

  // Update maps.
  $map_large = imagecreatefrompng('sites/default/files/images/stlouis_map_large.png');
  $map_large_overlay =
    imagecreatefrompng('sites/default/files/images/stlouis_map_large_overlay.png');

  $sql = 'SELECT color, xcoor, ycoor
    FROM `elected_officials`
    left join users on fkey_users_id = users.id
    left join `values` on fkey_values_id = `values`.id
    left join neighborhoods on users.fkey_neighborhoods_id = neighborhoods.id
    WHERE fkey_elected_positions_id = 1 and (xcoor > 1 or ycoor > 1);';
  $result = db_query($sql);
  $data = [];
  while ($item = db_fetch_object($result)) {
    if ($event_type == EVENT_ST_PATTYS_MAP) {
      $item->color = dechex(mt_rand(20, 30)) . dechex(mt_rand(160, 200)) . dechex(mt_rand(30, 50));
    }
    $data[] = $item;
  }

  foreach ($data as $item) {
    imagefill($map_large, $item->xcoor, $item->ycoor,
      imagecolorallocate($map_large,
        hexdec(substr($item->color, 0, 2)),
        hexdec(substr($item->color, 2, 2)),
        hexdec(substr($item->color, 4, 2))));
  }

  imagecopy($map_large, $map_large_overlay, 0, 0, 0, 0,
    imagesx($map_large_overlay), imagesy($map_large_overlay));

  $map_mid = imagecreatetruecolor(690, 720);
  $map_top = imagecreatetruecolor(690, 720);
  $map_bottom = imagecreatetruecolor(690, 720);
  $map_large_mid = imagecreatetruecolor(imagesx($map_large),
    imagesy($map_large) - 600);
  $map_large_bottom = imagecreatetruecolor(imagesx($map_large), 600);

  imagecopy($map_mid, $map_large, 0, 0, 54, 488, 690, 720);
  imagecopy($map_top, $map_large, 0, 0, 100, 0, 690, 720);
  imagecopy($map_bottom, $map_large, 0, 0, 0, 900, 690, 720);

  // Slice up the map.
  imagecopy($map_large_mid, $map_large, 0, 0, 0, 0, imagesx($map_large),
    imagesy($map_large) - 600);
  imagecopy($map_large_bottom, $map_large, 0, 0, 0, imagesy($map_large) - 600,
    imagesx($map_large), 600);

  // Write out the files.
  imagejpeg($map_large_mid,
    "sites/default/files/images/stlouis_map_large_colored.jpg");
  imagejpeg($map_large_bottom,
    "sites/default/files/images/stlouis_map_large_bottom_colored.jpg");
  imagejpeg($map_mid,
    "sites/default/files/images/stlouis_map_mid.jpg", 85);
  imagejpeg($map_top,
    "sites/default/files/images/stlouis_map_top.jpg", 85);
  imagejpeg($map_bottom,
    "sites/default/files/images/stlouis_map_bottom.jpg", 85);

  // Clean up, clean up, everybody, everywhere!
  imagedestroy($map_large);
  imagedestroy($map_large_overlay);
  imagedestroy($map_mid);
  imagedestroy($map_top);
  imagedestroy($map_bottom);

// Flag day -- give luck to those with flags.
/*
  unset($data);
  $sql = 'select * from equipment_ownership where fkey_equipment_id = 23;';
  $result = db_query($sql);
  while ($item = db_fetch_object($result)) $data[] = $item;

  foreach ($data as $item) {

    $sql = 'update users set luck = luck + 1 where id = %d;';
    $result = db_query($sql, $item->fkey_users_id);

    $sql = 'insert into user_messages set fkey_users_from_id = 177,
      fkey_users_to_id = %d, message = "Old Glory gives you 1 Luck!";';
    $result = db_query($sql, $item->fkey_users_id);

  }
*/
  // Set up includes and init() for events, if any.
  foreach ($event_type as $event_active) {
    db_set_active();
    $module_path = drupal_get_path('module', $game);
    db_set_active('game_' . $game);
    $file_to_include = $module_path . '/events/' . $event_active . '.inc';
    if (file_exists($file_to_include)) {
      include_once $file_to_include;
      $function_name = 'game_' . $event_active . '_init';
      if (function_exists($function_name)) {
        $function_name();
      }
    }
  }
  game_alter('cron', NULL);

  if ($month_mission == MISSION_JUN) {
    $sql = 'update quests set fkey_neighborhoods_id =
      (SELECT id FROM `neighborhoods` WHERE has_elections = 1 order by rand() limit 1)
      where id = 58;';
    db_query($sql);
  }

  // Add zombies?
  $sql = 'select count(*) as count from users where last_access < "%s"
    and meta = "";';
  $result = db_query($sql, date('Y-m-d', REQUEST_TIME - (86400 * 120)));
  $old_users = db_fetch_object($result);

  // 100 or more old accounts?  Check zombie count.
  if ($old_users->count >= 100) {
    $sql = 'select count(*) as count from users where meta = "zombie";';
    $result = db_query($sql);
    $zombies = db_fetch_object($result);

    // Fewer than 50 zombies?  Add 100 more.
    if ($zombies->count < 50) {

      $sql = 'select id, level from users where last_access < "%s"
        order by rand() limit 100;';
      $result = db_query($sql, date('Y-m-d', REQUEST_TIME - (86400 * 120)));
      $zombie_users = [];
      while ($item = db_fetch_object($result)) {
        $zombie_users[] = $item;
      }

      // Change each user to a zombie.
      foreach ($zombie_users as $zombie) {
        $name = game_zombie_name();
        if ($zombie->level < 25) {
          $zombie->level += 25 + mt_rand(0,50);
        }
        $sql = 'update users set meta = "zombie", username = "%s", level = %d
          where id = %d;';
        db_query($sql, $name, $zombie->level, $zombie->id);
      }

      // Notify the game players.
      game_send_system_message(1,
        'Grrrr!&nbsp; Zombies have sprung up everywhere!');
    }
  }

  db_set_active();
}

function _stlouis_filter_profanity($message) {
  return zg_filter_profanity($message);
}

function game_format_date($epoch) {
  return zg_format_date($epoch);
}

function _stlouis_fetch_user() {
  return zg_fetch_player();
}

function _stlouis_header($game_user) {
  return zg_fetch_header($game_user);
}
